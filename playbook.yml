---
- name: Minimal Ansible Playbook
  hosts: all
  vars:
    is_ci: "{{ lookup('env', 'CI') | default(false) | bool }}"
  vars_prompt:
    - name: github_token
      prompt: "Enter your GitHub Personal Access Token (classic) with 'repo', 'read:org', and 'write:gpg_key' scopes (press Enter to skip if already configured)"
      private: yes
      default: "{{ lookup('env', 'GH_TOKEN') | default('') }}"
    - name: user_name
      prompt: "Enter your name for GPG key (press Enter to use USER_NAME env var)"
      private: no
      default: "{{ lookup('env', 'USER_NAME') | default(lookup('env', 'USER')) }}"
    - name: user_email
      prompt: "Enter your email for GPG key (press Enter to use USER_EMAIL env var)"
      private: no
      default: "{{ lookup('env', 'USER_EMAIL') | default(lookup('env', 'USER') + '@users.noreply.github.com') }}"

  tasks:
    - name: Get Git version info
      command: git --version
      register: git_version
      changed_when: false
      ignore_errors: true

    - name: Check if Git is Apple version
      set_fact:
        is_apple_git: "{{ 'Apple Git' in git_version.stdout }}"
      when: git_version.rc == 0

    - name: Update Xcode Command Line Tools (if Apple Git is present)
      command: xcode-select --install
      when: is_apple_git is defined and is_apple_git
      changed_when: false
      ignore_errors: true

    - name: Install Git using Homebrew (if no Git is present)
      homebrew:
        name: git
        state: latest
      when: git_version.rc != 0

    - name: Show Git status
      debug:
        msg: |
          Git status:
          {% if git_version.rc == 0 %}
          Version: {{ git_version.stdout }}
          {% if is_apple_git %}
          Type: Apple Git (updated via Xcode Command Line Tools)
          {% else %}
          Type: Homebrew Git
          {% endif %}
          {% else %}
          Git is not installed
          {% endif %}

    - name: Ensure Homebrew bin directory is in PATH
      lineinfile:
        path: ~/.zshrc
        line: 'export PATH="/opt/homebrew/bin:$PATH"'
        create: yes
      when: is_apple_git

    - name: Get updated Git path
      command: which git
      register: git_path
      changed_when: false

    - name: Show Git version
      debug:
        msg: "Using Git: {{ git_path.stdout }} ({{ git_version.stdout }})"

    - name: Install GPG on macOS
      homebrew:
        name: gnupg
        state: latest
      when: ansible_os_family == "Darwin"

    - name: Install GPG on Ubuntu
      apt:
        name: gnupg
        state: latest
      when: ansible_os_family == "Debian"
      become: true

    - name: Get GPG version
      command: gpg --version
      register: gpg_version
      changed_when: false

    - name: List GPG keys
      command: gpg --list-secret-keys --keyid-format LONG
      register: gpg_keys
      changed_when: false
      ignore_errors: true

    - name: Generate GPG key if none exists
      block:
        - name: Create GPG key configuration file
          copy:
            dest: /tmp/gpg-key-gen.conf
            content: |
              Key-Type: RSA
              Key-Length: 4096
              Name-Real: {{ user_name }}
              Name-Email: {{ user_email }}
              Expire-Date: 0
              %no-protection
              %commit
            mode: '0600'

        - name: Generate GPG key
          command: gpg --batch --generate-key /tmp/gpg-key-gen.conf
          register: gpg_gen_key

        - name: Clean up GPG key configuration
          file:
            path: /tmp/gpg-key-gen.conf
            state: absent
      when: gpg_keys.rc != 0 or gpg_keys.stdout == ""

    - name: Get GPG key ID
      shell: gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2
      register: gpg_key_id
      changed_when: false

    - name: Export GPG public key
      command: gpg --armor --export {{ gpg_key_id.stdout }}
      register: gpg_public_key
      changed_when: false
      when: gpg_key_id.stdout != ""

    - name: Configure Git to use GPG key
      command: "{{ item }}"
      loop:
        - git config --global user.signingkey {{ gpg_key_id.stdout }}
        - git config --global commit.gpgsign true
      when: gpg_key_id.stdout != ""

    - name: Check if GPG key is on GitHub
      command: gh gpg-key list
      register: github_gpg_keys
      changed_when: false
      ignore_errors: true

    - name: Add GPG key to GitHub if not present
      shell: |
        echo "{{ gpg_public_key.stdout }}" | gh gpg-key add -
      register: added_gpg_key
      when: gpg_key_id.stdout != "" and (github_gpg_keys.rc != 0 or gpg_key_id.stdout not in github_gpg_keys.stdout)

    - name: Remove GPG key from GitHub in CI environment
      command: gh gpg-key delete {{ gpg_key_id.stdout }} --confirm
      when: is_ci and gpg_key_id.stdout != "" and added_gpg_key.changed
      ignore_errors: true

    - name: Example task
      debug:
        msg: "Hello from Ansible!"

    - name: Check if GitHub CLI is installed
      command: gh --version
      register: gh_version
      changed_when: false
      ignore_errors: true

    - name: Install GitHub CLI on macOS
      homebrew:
        name: gh
        state: latest
      when: ansible_os_family == "Darwin" and gh_version.rc != 0

    - name: Install GitHub CLI on Ubuntu
      block:
        - name: Install required packages
          apt:
            name: 
              - curl
              - gpg
            state: present
            
        - name: Download GitHub CLI GPG key
          get_url:
            url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
            dest: /usr/share/keyrings/githubcli-archive-keyring.gpg
            mode: '0644'

        - name: Add GitHub CLI apt repository
          apt_repository:
            repo: deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main
            state: present
            filename: github-cli

        - name: Install GitHub CLI
          apt:
            name: gh
            state: latest
            update_cache: yes
      when: ansible_os_family == "Debian" and gh_version.rc != 0
      become: true

    - name: Check GitHub CLI auth status
      command: gh auth status
      register: gh_auth_status
      changed_when: false
      ignore_errors: true

    - name: Configure GitHub CLI authentication
      shell: |
        echo "{{ github_token }}" | gh auth login --with-token
      when: github_token != "" and gh_auth_status.rc != 0

    - name: Configure GitHub CLI settings
      block:
        - name: Configure git protocol preference
          command: gh config set git_protocol ssh

        - name: Configure default editor
          command: gh config set editor "code --wait"

        - name: Configure default browser
          command: "{{ item }}"
          loop:
            - gh config set browser "{{ 'open' if ansible_os_family == 'Darwin' else 'xdg-open' }}"
          when: not is_ci

        - name: Configure aliases
          command: "{{ item }}"
          loop:
            - gh alias set prc 'pr create --web --assignee @me' --clobber
            - gh alias set prv 'pr view --web' --clobber
            - gh alias set prl 'pr list --web' --clobber
            - gh alias set rv 'repo view --web' --clobber
          ignore_errors: true

        - name: Add PR template
          copy:
            dest: ~/.config/gh/pr-template.md
            content: |
              # Pull Request

              ## Changes
              {% raw %}
              {{.Message}}
              {% endraw %}
            mode: '0644'
            force: yes

        - name: Configure PR template
          command: gh config set pr.template ~/.config/gh/pr-template.md

    - name: Show GitHub CLI status
      debug:
        msg: |
          GitHub CLI status:
          {% if gh_version.rc == 0 %}
          Version: {{ gh_version.stdout }}
          {% if gh_auth_status.rc == 0 %}
          Authentication: Configured
          {% else %}
          Authentication: Not configured (token required)
          {% endif %}
          {% else %}
          GitHub CLI has been installed and configured.
          {% endif %}

    - name: Check if Zsh is installed
      command: zsh --version
      register: zsh_version
      changed_when: false
      ignore_errors: true

    - name: Install Zsh on macOS
      homebrew:
        name: zsh
        state: latest
      when: ansible_os_family == "Darwin" and zsh_version.rc != 0
      register: zsh_install
      failed_when: zsh_install.failed

    - name: Install Zsh on Ubuntu
      apt:
        name: zsh
        state: latest
      when: ansible_os_family == "Debian" and zsh_version.rc != 0
      become: true
      register: zsh_install
      failed_when: zsh_install.failed

    - name: Check if Oh My Zsh is installed
      stat:
        path: ~/.oh-my-zsh
      register: oh_my_zsh

    - name: Install Oh My Zsh
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: not oh_my_zsh.stat.exists
      register: oh_my_zsh_install
      failed_when: oh_my_zsh_install.failed

    - name: Configure Oh My Zsh plugins
      lineinfile:
        path: ~/.zshrc
        regexp: '^plugins=\(.*\)$'
        line: 'plugins=(git gh docker docker-compose kubectl helm aws terraform)'
        create: yes
      when: oh_my_zsh.stat.exists or oh_my_zsh_install is defined and oh_my_zsh_install.rc == 0
      register: plugins_config
      failed_when: plugins_config.failed

    - name: Configure Oh My Zsh theme
      lineinfile:
        path: ~/.zshrc
        regexp: '^ZSH_THEME=.*$'
        line: 'ZSH_THEME="robbyrussell"'
        create: yes
      when: oh_my_zsh.stat.exists or oh_my_zsh_install is defined and oh_my_zsh_install.rc == 0
      register: theme_config
      failed_when: theme_config.failed

    - name: Create custom aliases file
      copy:
        dest: ~/.oh-my-zsh/custom/aliases.zsh
        content: |
          # Custom aliases
          alias ll='ls -la'
          alias k='kubectl'
        mode: '0644'
      when: oh_my_zsh.stat.exists or oh_my_zsh_install is defined and oh_my_zsh_install.rc == 0
      register: aliases_config
      failed_when: aliases_config.failed

    - name: Set Zsh as default shell
      shell: chsh -s $(which zsh)
      when: zsh_version.rc == 0 and ansible_env.SHELL != '/bin/zsh'
      become: true
      register: chsh_config
      failed_when: chsh_config.rc != 0
      ignore_errors: true

    - name: Show Zsh status
      debug:
        msg: |
          Zsh status:
          {% if zsh_version.rc == 0 %}
          Version: {{ zsh_version.stdout }}
          {% if oh_my_zsh.stat.exists or (oh_my_zsh_install is defined and oh_my_zsh_install.rc == 0) %}
          Oh My Zsh: Installed
          {% else %}
          Oh My Zsh: Not installed
          {% endif %}
          {% else %}
          Zsh is not installed
          {% endif %} 